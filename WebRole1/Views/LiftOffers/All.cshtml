@using ShareCar.Models
@model IEnumerable<ShareCar.Models.LiftOffer>

@{
    ViewBag.Title = "Lift Offers";
}

<div class="jumbotron">

        @using (Html.BeginForm("All", "LiftOffers", FormMethod.Get, new { id = "form"}))
        {
            <p>
                <!-- Client side validation, numbers and listed below characters not allowed -->
                Find by City/Town:
                @*@Html.TextBox("SearchString", ViewBag.CurrentFilter as string)*@
                @Html.TextBox("SearchString", "", new { data_val = "true",
                    data_val_regex = "Provided invalid character.",
                        data_val_regex_pattern = "[^_+-=.,!?#$€£%^&*(){}:;/|<>'~`]+" })
                <input type="submit" id="btn" value="Search" />
                <br />
                @Html.ValidationMessage("SearchString", new { @style="font-size:16px"})
            </p>
        }
        @ViewBag.CurrentFilter
</div>
<div class="col">
    <h4 style="font-weight:bolder">Available lift offers</h4>
    <table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.User.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.User.RatingAvg)
            </th>
            <th>
                @Html.ActionLink(" From", "All", new {
                sortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.CurrentFilter },
                new { @class = "glyphicon glyphicon-sort", @style = "font-weight:bolder" })
            </th>
            <th>
                @Html.ActionLink(" To", "All", new {
                sortOrder = ViewBag.DateSortParm, currentFilter = ViewBag.CurrentFilter },
                new { @class = "glyphicon glyphicon-sort", @style = "font-weight:bolder" })
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DepartureHour)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ArrivalHour)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.SeatsAvailable)
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            // find user to display name and rating
            ApplicationDbContext db = new ApplicationDbContext();
            var name = db.Users.FirstOrDefault(user => user.Id == item.UserID);

            <tr>
                <td>
                    @Html.DisplayFor(model => name.Name)
                </td>
                <td>
                    @Html.DisplayFor(model => name.RatingAvg)
                </td>
                <td>
                    @Html.DisplayFor(model => item.StartPointName)
                </td>
                <td>
                    @Html.DisplayFor(model => item.EndPointName)
                </td>
                <td>
                    @Html.DisplayFor(
                    model => item.DepartureHour):@Html.DisplayFor(model => item.DepartureMin)
                </td>
                <td>
                    @Html.DisplayFor(
                    model => item.ArrivalHour):@Html.DisplayFor(model => item.ArrivalMin)
                </td>
                <td>
                    @Html.DisplayFor(model => item.SeatsAvailable)
                </td>
                <td>
                    @Html.ActionLink("Details", "AnonymDetails", new { id = item.LiftOfferID })
                </td>
            </tr>
        }
    </table>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}